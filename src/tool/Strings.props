<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <PrepareForBuildDependsOn>
      PrepareBuild;$(PrepareForBuildDependsOn)
    </PrepareForBuildDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="ProcessStaticStrings" 
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>  
      <Input ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />  
      <RootNamespace Required="true" />  
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />  
    </ParameterGroup>  
    <Task>  
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">  
<![CDATA[  
        if (Input.Length > 0)  
        {  
          for (int i = 0; i < Input.Length; i++)  
          {  
            ITaskItem item = Input[i];  
            var content = item.GetMetadata("Content");
            var source = item.GetMetadata("Source");
            var global = item.GetMetadata("Global");
            var fileSize = new FileInfo(content).Length;
            item.SetMetadata("Filesize", fileSize.ToString());
            if (!File.Exists(source) || (File.GetLastWriteTime(content) > File.GetLastWriteTime(source)))
            {
              FileInfo sourceInfo = new FileInfo(source);
              Directory.CreateDirectory(sourceInfo.DirectoryName);
              File.WriteAllLines(source, ProcessContent(content));
              IEnumerable<string> ProcessContent(string file)
              {
                yield return "// This file was generated by the build.";
                yield return "#include \"pch.h\"";
                yield return "namespace " + RootNamespace + "::strings {";
                yield return "extern char const " + global + "[] = R\"xyz(";
                int count = 0;
                foreach(string line in File.ReadLines(file))
                {
                  count += line.Length + 2;
                  if(count > 16000)
                  {
                    yield return ")xyz\" R\"xyz(" + line;
                    count = line.Length;
                  }
                  else
                  {
                    yield return line;
                  }
                }
                yield return ")xyz\";";
                yield return "}";
              }
            }
          }  
        }  
        Result = Input;
]]>  
      </Code>  
    </Task>  
  </UsingTask>    

 <Target Name="PrepareBuild" BeforeTargets="Build;PrepareForBuild;ClCompile">
    <ItemGroup>
      <StaticStringFiles Include="$(SolutionDir)\strings\**\*.*;$(MSBuildProjectDirectory)\strings\**\*.*"/>
      <StaticStringInput Include="@(StaticStringFiles)">
        <Content>%(Identity)</Content>
        <Header>$([System.String]::Copy('$(OutDir)strings\%(RecursiveDir)%(Filename).h').ToLower())</Header>
        <Source>$([System.String]::Copy('$(OutDir)strings\%(RecursiveDir)%(Filename).cpp').ToLower())</Source>
        <Global>$([System.String]::Copy('%(Filename)').ToLower())</Global>
      </StaticStringInput>
    </ItemGroup>
    <ProcessStaticStrings Input="@(StaticStringInput)" RootNamespace="$(RootNamespace)">
      <Output ItemName="StaticStrings" TaskParameter="Result" />  
    </ProcessStaticStrings>
    <Message Text="StaticStrings: @(StaticStrings->'%(Content):%(Source):%(Header):%(Global)')" importance="high"/>

    <!-- Create strings.h iff number and names of string source files changes -->
    <PropertyGroup>
      <StringGlobals>@(StaticStrings->'%20%20%20%20extern char const %(Global)[%(Filesize)]%3b;','&#x0d;&#x0a;')</StringGlobals>
      <StringsHeaderFile>$(OutDir)strings.h</StringsHeaderFile>
      <!-- Note: WriteLinesToFile has bugs with mixing line terminators -->
      <StringsHeaderLines>
// $(RootNamespace) static string declarations. This file was generated by the build.&#x0d;
#pragma once&#x0d;
namespace $(RootNamespace)::strings&#x0d;
{&#x0d;
$(StringGlobals)
}</StringsHeaderLines>
    </PropertyGroup>
      <WriteLinesToFile
        File="$(StringsHeaderFile)" Lines="$(StringsHeaderLines)"
        ContinueOnError="true" Overwrite="true"
        WriteOnlyWhenDifferent="false" />

    <!-- Add individual strings.cpp files (one per source) for incremental builds -->
    <ItemGroup>
      <ClCompile Include="@(StaticStrings->'%(Source)')"/>
    </ItemGroup>
  </Target>

</Project>
